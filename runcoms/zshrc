#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

#
# imported from previous .zshrc
#

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export PATH="$HOME/.rbenv/shims:/usr/local/go/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin"
export EDITOR=vim                       # エディタをvimに設定
export LANG=ja_JP.UTF-8                 # 文字コードをUTF-8に設定
export KCODE=u                          # KCODEにUTF-8を設定
export AUTOFEATURE=true
export TERM='screen-256color'
#export TERM='xterm-256color'
bindkey -e                              # キーバインドをemacsモードに設定
setopt no_beep                          # ビープ音
setopt auto_cd                          # ディレクトリ名の入力のみで移動
setopt auto_pushd                       # cd時にディレクトリスタックにpushdする
setopt pushd_ignore_dups
# setopt correct                        # コマンドのスペルを訂正する
setopt magic_equal_subst                # =以降も補完する(--prefix=/usrなど)
setopt prompt_subst                     # プロンプト定義内で変数置換やコマンド置換を扱う
setopt notify                           # バックグラウンドジョブの状態変化を即時報告
setopt equals                           # =commandを`which command`と同じ処理
setopt nonomatch                        # nonomatch
bindkey \^U backward-kill-line

## Complement ###
autoload -U compinit; compinit          # 補完機能を有効
setopt auto_list                        # 補完候補を一覧で表示(d)
setopt auto_menu                        # 補完キー連打で補完候補を順に表示(d)
setopt list_packed                      # 補完候補をできるだけ詰めて表示
setopt list_types                       # 補完候補にファイルの種類も表示
bindkey "^[[Z" reverse-menu-complete    # Shift-Tabで補完候補を逆順("\e[Z"でも動作する)
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # 補完時に大文字小文字を区別しない
setopt extended_glob

### History ###
HISTFILE=~/.zsh_historyw                # ヒストリを保存するファイル
HISTSIZE=10000                          # メモリに保存されるヒストリの件数
SAVEHIST=10000                          # 保存されるヒストリの件数
setopt bang_hist                        # !を使ったヒストリ展開を行う(d)
setopt extended_history                 # ヒストリに実行時間も保存する
setopt hist_ignore_dups                 # 直前と同じコマンドはヒストリに追加しない
#setopt share_history                   # 他のシェルのヒストリをリアルタイムで共有する
setopt hist_reduce_blanks               # 余分なスペースを削除してヒストリに保存する

# マッチしたコマンドのヒストリを表示
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

# すべてのヒストリを表示
function history-all { history -E 1 }

# 色の設定
export LSCOLORS=Exfxcxdxbxegedabagacad
# 補完時の色の設定
export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
# ZLS_COLORSとは？
export ZLS_COLORS=$LS_COLORS
export CLICOLOR=true
# 補完候補に色を付ける
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# プロンプトに色
autoload -U colors; colors
# 一般ユーザ時
tmp_prompt="%{${fg[cyan]}%}%n@%m%# %{${reset_color}%}"
tmp_prompt2="%{${fg[cyan]}%}%_> %{${reset_color}%}"
tmp_rprompt="%{${fg[green]}%}[%~]%{${reset_color}%}"
tmp_sprompt="%{${fg[yellow]}%}%r is correct? [Yes, No, Abort, Edit]:%{${reset_color}%}"

# rootユーザ時(太字にしアンダーバー
if [ ${UID} -eq 0 ]; then
	tmp_prompt="%B%U${tmp_prompt}%u%b"
	tmp_prompt2="%B%U${tmp_prompt2}%u%b"
	tmp_rprompt="%B%U${tmp_rprompt}%u%b"
	tmp_sprompt="%B%U${tmp_sprompt}%u%b"
fi

# PROMPT=$tmp_prompt									# 通常のプロンプト
# PROMPT2=$tmp_prompt2								# セカンダリのプロンプト(コマンドが2行以上の時に表示される)
# RPROMPT=$tmp_rprompt								# 右側のプロンプト
# SPROMPT=$tmp_sprompt								# スペル訂正用プロンプト
# SSHログイン時のプロンプト
[ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
	#          PROMPT="%{${fg[white]}%}${HOST%%.*} ${PROMPT}"
;

### Title (user@hostname) ###
case "${TERM}" in
	kterm*|xterm*|)
		precmd() {
			echo -ne "\033]0;${USER}@${HOST%%.*}\007"
		}
		;;
esac

### Aliases ###
alias vi=vim
alias t='tmux has-session > /dev/null 2>&1 || tmux -2 && tmux -2 attach'
alias tl='tmux -2 list-sessions'
alias ta='tmux -2 attach'
#alias history='history 1'
alias notif='terminal-notifier -title "FROM TERMINAL" -message "FINISHED"'
export GREP_OPTIONS="--color"

# cpanm
export PERL_CPANM_OPT="--local-lib=~/extlib"
export PERL5LIB="$HOME/extlib/lib/perl5:$HOME/extlib/lib/perl5/i386-freebsd-64int:$PERL5LIB"

# Predictable SSH authentication socket location.
SOCK="/tmp/ssh-agent-$USER-screen"
if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]
	then
	rm -f /tmp/ssh-agent-$USER-screen
	ln -sf $SSH_AUTH_SOCK $SOCK
	export SSH_AUTH_SOCK=$SOCK
fi


#################################################
## GO
##################################################
export GOPATH=$HOME/.go
export PATH=$PATH:$HOME/.go/bin



#################################################
# PECO
#################################################
function peco-select-history() {
local tac
if which tac > /dev/null; then
	tac="tac"
else
	tac="tail -r"
fi
BUFFER=$(\history -n 1 | eval $tac | peco --query "$LBUFFER")
	CURSOR=$#BUFFER
	zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history


#################################################
# PACKER
#################################################
export PATH=~/packer:$PATH
zstyle ':completion:*:default' menu select=1



#################################################
# PECO GHQ
##################################################
function peco-src () {
local selected_dir=$(ghq list --full-path | peco --query "$LBUFFER")
	if [ -n "$selected_dir" ]; then
		BUFFER="\cd ${selected_dir}"
		zle accept-line
	fi
	zle clear-screen
}
zle -N peco-src
bindkey '^]' peco-src


#################################################
# DOCKER
##################################################
export DOCKER_HOST=tcp://localhost:4243

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

#################################################
# PECO VIM
###################################################
function peco-vim () {
local selected_file=$(find . -type f -name "*" | peco)
if [ -n "$selected_file" ]; then
	BUFFER="\vim ${selected_file}"
	zle accept-line
	fi
	zle clear-screen
}
zle -N peco-vim
bindkey '^v' peco-vim

# For debug
# if (which zprof > /dev/null) ;then
# 	zprof | less
# fi


#################################################
# RBENV-BINSTUBS
#################################################
export PATH=./vendor/bin:$PATH
alias be='bundle exec'


#function git(){hub "$@"}


#################################################
# COOL-PECO
#################################################
source $HOME/cool-peco/cool-peco

zle -N cool-peco-ssh
bindkey '^s' cool-peco-ssh # ctrl+h

#################################################
# ANYENV
#################################################
export PATH="$HOME/.anyenv/bin:$PATH"
eval "$(anyenv init -)"
for D in `ls $HOME/.anyenv/envs`
do
  export PATH="$HOME/.anyenv/envs/$D/shims:$PATH"
done


#export PATH=$HOME/Library/Python/2.7/bin:$PATH


#################################################
# mssh
#################################################

function mssh() {
tmux new-window "exec ssh $1"
shift
for host in "$@"; do
  tmux split-window "exec ssh $host"
  tmux select-layout tiled > /dev/null
  # ${PROG_TMUX} select-layout even-vertical > /dev/null
  # ${PROG_TMUX} select-layout even-horizontal > /dev/null
done
}
